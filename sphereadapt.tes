#version 400 compatibility
#extension GL_ARB_tessellation_shader : enable

#define uModelViewMatrix gl_ModelViewMatrix
#define uProjectionMatrix gl_ProjectionMatrix

precision mediump float;

uniform sampler2D uDispUnit;
uniform sampler3D Noise3;
uniform float uNoiseAmp;
uniform float uNoiseFreq;
uniform float uBiasx, uBiasy, uBiasz;
uniform float uLightX, uLightY, uLightZ;


uniform sampler2D Tex1;
uniform bool uDoElevations;
uniform float uHeightScale;

in vec2 TexCoord_ES_in[];
in vec3 Normal_ES_in[];

in vec2 TextureCoord[];

out vec2 TexCoord_FS_in;
out vec3 Normal_FS_in;

layout( quads, equal_spacing, ccw)  in;

patch in float tcRadius;
patch in vec3  tcCenter;

out vec3 teNormal;

const float PI = 3.14159265;

uniform float uDelta = 0.3f;
vec3 DELTAX = vec3( uDelta, 0., 0. );
vec3 DELTAY = vec3( 0., uDelta, 0. );


vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}


float Height( vec3 mc )
{
	vec3 newmc = vec3( mc.x+uBiasx, mc.y+uBiasy, mc.z );
	vec4 nv = texture( Noise3, uNoiseFreq * newmc );
	float n = nv.r + nv.g + nv.b + nv.a;
	n = n - 2.;
	n = n + uBiasz;
	n *= uNoiseAmp;
	return n;
}

//out float Height;

in TCS_OUT
{
	vec2 vST;
    vec2 tc;
} tes_in[];

out TES_OUT
{
	vec2 vST;
    vec2 tc;

} tes_out;



void main( )
{
	vec3 new = gl_TessCoord.xyz;

	TexCoord_FS_in = interpolate2D(TexCoord_ES_in[0], TexCoord_ES_in[1], TexCoord_ES_in[2]);

	float Displacement = texture(uDispUnit, tes_in[0].vST).x;

	Displacement *= uHeightScale;

	float h00 = Height( gl_TessCoord.xyz );
	/*float hp0 = Height( gl_TessCoord.xyz + DELTAX );
	float hm0 = Height( gl_TessCoord.xyz - DELTAX );
	float h0p = Height( gl_TessCoord.xyz + DELTAY );
	float h0m = Height( gl_TessCoord.xyz - DELTAY );
	float dzdx = hp0 - hm0;
	vec3 xtangent = vec3( 1., 0., dzdx );
	float dzdy = h0p - h0m;
	*/

	
	//new.y += h00; // displace the point
	//new.y += h00;

	
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	float w = gl_TessCoord.z;

	/*
	vec3 v = u + v + w;

	float min_noise_value = 0.5f;
    float max_noise_value = 2.5f;
    float intensity_scale = 0.015f;
    float noise_range = max_noise_value - min_noise_value;

	float noise = texture(uDispUnit, vec2(v)).r;
	 // sphere offsetting multiplier
    height = min_noise_value + noise_range * noise * intensity_scale;

	vec3 pos = normalize(x + y + z);

	 pos *= height;
	 */

	// ----------------------------------------------------------------------
    // retrieve control point texture coordinates
    vec2 t00 = TextureCoord[0];
    vec2 t01 = TextureCoord[1];
    vec2 t10 = TextureCoord[2];
    vec2 t11 = TextureCoord[3];

    // bilinearly interpolate texture coordinate across patch
    
	vec2 t0 = (t01 - t00) * u + t00;
    vec2 t1 = (t11 - t10) * u + t10;
    vec2 texCoord = (t1 - t0) * v + t0;
	

	 // lookup texel at patch coordinate for height and scale + shift as desired
    //Height = texture(uDispUnit, texCoord).rgb;

	float phi = PI * ( u - .5 );
	float theta = 2. * PI * ( v - .5 );

	float cosphi = cos(phi);
	vec3 xyz = vec3( cosphi*cos(theta), sin(phi), cosphi*sin(theta) );
	teNormal = xyz;
	
	
	new += normalize(xyz) * Displacement;

	xyz *= tcRadius;
	xyz += tcCenter;
	
	

	gl_Position = uModelViewMatrix * vec4( xyz,1. );
}
